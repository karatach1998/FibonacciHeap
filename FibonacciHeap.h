/*
 * Данный модуль реализует набор методов и определенных типов,
 * для работы с Фибоначчиевой кучи.
 * 
 * Фибоначчиева куча представляет собой набор корнеевых деревьев,
 * упорядоченных в соответствии со свойством упорядоченности.
 * 
 * Каждый узел кучи можно изобразить следующим образом:
 *
 *         p - родитель
 *              |
 *      left -- x -- right             : j-й уровень
 *              |
 *         child - дочерний узел
 *
 * Помимо указанных данных и информационной части
 * каждый узел также содержит:
 * x.degree - степень: количество дочерних
 * элементов (на следующем уровне).
 * x.mark - пометка: булев атрибут, который указывает
 * производились ли удаления дочерних жлементов данного узла,
 * после того как узел сам стал дочерним.
 *
 * На каждом уровне элементы имющие общего родителя
 * (или не имеющие родитлей) связываются в двухсвязный циклический
 * линейный спиок. 
 *
 * Таким образом дескриптор дерева содержит указатель
 * на минимальный элемент дерева и общее количество элементов.
 */


#ifndef FIBONACCI_HEAP_H
#define FIBONACCI_HEAP_H

typedef int TBase;

typedef struct fhnode
{
    TBase key;              // Ключ.
    struct ftnode* p;       // Указатель на родительский узел.
    struct ftnode* child;   // Указатель на дочерний узел.
    struct ftnode* left;    // Указатель на левый узел.
    struct ftnode* right;   // Указатель на правы узел.
    unsigned degree;        // Количество дочерних узлов.
    unsigned char mark : 1; // Флаг показывает, были ли удалены дочерние
                            // узлы после того как узел стал чьим то сыном.
} FHNode;


typedef struct
{
    FTNode* min;    // Указатель на корень дерева с минимальным ключем.
    unsigned n;     // Текущее количство узлов.
} FibHeep;


// Создает и возвращает новую пирамиду, не содержащую элементов.
FibHeep makeFH( void );

// Вставляет в пирамиду H элемент x.
// Предполагается, что память под него уже выделена снаружи
// и поле x.key уже инициализировано.
void insertFH( FibHeep* H, FHNode* x );

// Возвращает указатель на минимальный элемент пирамиды H,
// ключ которого минимален.
FTNode* minimumFH( FibHeep* H );

// Удаляет из пирамиды H элемент, ключ которого минимален.
void extractMinFH( FibHeep* H );

// Создает и возвращает новую пирамиду,
// которая содержит все элементы пирамид H1 и H2.
// После её выполнения H1 и H2 будут испорчены.
FibHeep unionFH( FibHeep* H1, FibHeep* H2 );

// Назначает элементу x в пирамиде H новое значение ключа k,
// которое не превышает его текущего значения.
void decreaseKeyFH( FibHeep* H, FHNode* x, TBase k );

// Удаляет элемент x из пирамиды H.
void deleteFH( FibHeep* H, FHNode* x );


#endif // FIBONACCI_HEAP_H